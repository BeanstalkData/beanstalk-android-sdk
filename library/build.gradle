apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

def libraries = rootProject.ext.libraries

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 25

        def apiProperties = getProperties("library/api.properties")
        buildConfigField 'String', 'BASE_URL', "\"${apiProperties['baseUrl']}\""
        buildConfigField 'String', 'COMPANY', "\"${apiProperties['company']}\""
        buildConfigField 'String', 'APP_KEY', "\"${apiProperties['appKey']}\""
        buildConfigField 'String', 'APP_USERNAME', "\"${apiProperties['appUsername']}\""
        buildConfigField 'String', 'GOOGLE_MAPS_KEY', "\"${apiProperties['googleMapsKey']}\""
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    lintOptions {
        quiet true
        abortOnError false
        warningsAsErrors false
        noLines false
        showAll true
        htmlReport true
    }
    dexOptions {
        dexInProcess true
        javaMaxHeapSize "2g"
    }
}

dependencies {
    compile "com.android.support:support-annotations:${libraries.supportVersion}"
    compile "com.squareup.retrofit2:retrofit:${libraries.retrofit}"
    compile "com.squareup.retrofit2:converter-gson:${libraries.retrofit}"
    compile "com.squareup.retrofit2:converter-scalars:${libraries.retrofit}"

    testCompile "junit:junit:${libraries.junit}"
    testCompile "com.squareup.okhttp3:logging-interceptor:${libraries.okhttp}"
    testCompile "com.squareup.okhttp3:mockwebserver:${libraries.okhttp}"
    testCompile "org.mockito:mockito-core:${libraries.mockito}"
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}